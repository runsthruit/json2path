#! /bin/bash

function json2path ()
{

	declare __bash_function_init_{opts,{locv,glbv}_{strings,arrays}}=
	__bash_function_init_opts=()
	__bash_function_init_locv_strings=(
		JSON
		OUT{,_{CUR,VAL}}
		STG{,BAK}
		ENT
		CHR_{DBQ,ESC}

	)
	__bash_function_init_locv_arrays=(
		JSONS
		RGXS
	)
	__bash_function_init_glbv_strings=()
	__bash_function_init_glbv_arrays=()
	: BASH_FUNCTION_INIT SOURCE; eval "$( bash_function_init || echo return 1 )"

	RGXS=(
		PAR="(:)"
		NXT="(,)"
		WORD="(true|false|null)"
		NUMBER="([0-9\.eE\+-]+)"
#		STRING_EDQ="\"+([^\"]*[\\][\"][^\"]*)\""
		OBJ_NUL="({})"
		OBJ_BEG="({)"
		OBJ_END="(})"
		ARY_NUL="(\[\])"
		ARY_BEG="(\[)"
		ARY_END="(\])"
		ERR="(.*)"
	)
	CHR_DBQ="\""
	CHR_ESC="\\"

	[ "${#ARGS[@]}" -gt 0 ] \
	&& JSONS=( "${ARGS[@]}" ) \
	|| [ -t 0 ] \
	|| JSONS[0]="-"

	for (( I=0; I<${#JSONS[@]}; I++ ))
	do

		STG=REG

		[[ "${JSONS[${I}]}" =~ (${RGXS[0]}|^(${RGXS[7]}|${RGXS[10]})) ]] \
		&& CMD=( echo "${JSONS[${I}]}" ) \
		|| [ "${JSONS[${I}]}" == "-" ] \
		&& CMD=( cat - ) \
		|| [ -r "${JSONS[${I}]}" ] \
		&& CMD=( cat "${JSONS[${I}]}" ) \
		|| { printf "${FNC}: %s\n" "Could not read ( ${JSONS[${I}]} )"; return 1; } 1>&2

		OUT="$( 

			eval "${CMD[@]}" |
			while read -r -d"${CHR_DBQ}" JSON
			do

				[ "${STG}" != STR ] || {

					[ "${DBG}" -lt 4 ] \
					|| {
						printf "\n%0*d\n" ${COLUMNS:-10} 0
						printf "@ STG %s << %s\n" "${STG}" "${STGBAK}"
						printf "%sJSON %s\t{%q}\n" "$" "${#JSON}" "${JSON}" | cut -b1-${COLUMNS}
					} 1>&2

					OUT_VAL="${OUT_VAL}${JSON}"
					[[ "${JSON}" =~ [${CHR_ESC}]$ ]] && {
						OUT_VAL="${OUT_VAL}${CHR_DBQ}"
						STGBAK="${STG}"
					} || {
						STG=REG
						STGBAK=STR
					}
					JSON=
					continue

				}

				while :
				do

					[ "${DBG}" -lt 4 ] \
					|| {
						printf "\n%0*d\n" ${COLUMNS:-10} 0
						printf "@ STG %s << %s\n" "${STG}" "${STGBAK}"
						printf "%sJSON %s\t{%q}\n" "$" "${#JSON}" "${JSON}" | cut -b1-${COLUMNS}
					} 1>&2

					for (( ENT=0; ENT<${#RGXS[@]}; ENT++ ))
					do

						RGX="^[[:space:]]*${RGXS[${ENT}]#*=}[[:space:]]*(.*)"
						RGX_TYP="${RGXS[${ENT}]%%=*}"

						[[ "${JSON}" =~ ${RGX} ]] || continue

						[ "${RGX_TYP}" == PAR -o "${STGBAK}" != STR ] || {
							OUT_CUR="${OUT_CUR}="
							OUT_VAL="\"${OUT_VAL}\""
							STGBAK="${STG}"
							break
						}

						[ "${DBG}" -lt 1 ] || {
							printf "\n%% RGX %s [%s]\n" "${RGX_TYP}" "${ENT}"
							[ "${DBG}" -lt 3 ] \
							|| {
								for (( I=1; I<${#BASH_REMATCH[@]}; I++ ))
								do
									printf "%sBASH_REMATCH[%s] %s\t{%q}\n" \
										"$" \
										"${I}" \
										"${#BASH_REMATCH[${I}]}" \
										"${BASH_REMATCH[${I}]}" |
										cut -b1-${COLUMNS}
								done
							}
						} 1>&2

						JSON="${BASH_REMATCH[2]}"

						case "${RGX_TYP}" in
							( PAR ) {
								OUT_CUR="${OUT_CUR}${OUT_VAL}"
								OUT_VAL=
							};;
							( NXT ) {
								[[ "${OUT_CUR}" =~ ^(.*)\[([0-9]*)\]$ ]] \
								&& OUT_CUR="${BASH_REMATCH[1]}[$((${BASH_REMATCH[2]}+1))]" \
								|| OUT_CUR="${OUT_CUR%/*}/"
							};;
							( WORD | NUMBER ) {
								OUT_CUR="${OUT_CUR}="
								OUT_VAL="${BASH_REMATCH[1]}"
								break
								ENT="${#RGXS[@]}"
							};;
							( OBJ_NUL ) :;;
							( OBJ_BEG ) OUT_CUR="${OUT_CUR}/";;
							( OBJ_END ) OUT_CUR="${OUT_CUR%/*}";;
							( ARY_NUL ) {
								OUT_CUR="${OUT_CUR}[-1]="
								break
								ENT="${#RGXS[@]}"
							};;
							( ARY_BEG ) OUT_CUR="${OUT_CUR}[0]";;
							( ARY_END ) OUT_CUR="${OUT_CUR%\[*\]}";;
							( ERR ) {
								printf ": BAD_JSON\n" 1>&2
								return 2
							};;
							( * ) {
								printf ": RGX_ERROR\n" 1>&2
								return 1
							};;
						esac

						[ "${DBG}" -lt 4 ] \
						|| {
							declare -p OUT_{CUR,VAL} | sed "s/^declare [^ ]* /\$/" | cut -b1-${COLUMNS}
						} 1>&2

						#[ "${ENT}" -ne "${#RGXS[@]}" ] || break
						[ -n "${JSON}" ] || break
						ENT=0
						STGBAK="${STG}"

					done

					[ "${DBG}" -lt 4 ] \
					|| {
						declare -p OUT_{CUR,VAL} | sed "s/^declare [^ ]* /\$/" | cut -b1-${COLUMNS}
					} 1>&2

					[ "${DBG}" -lt 2 ] || {
						[ "${DBG}" -lt 3 ] || printf "\n"
						[[ "${OUT_CUR}" == *= ]] \
						&& printf "%s%s\n" "+ " "${OUT_CUR}${OUT_VAL}" \
						|| printf "%s%s\n" "- " "${OUT_CUR}${OUT_VAL}"
					} 1>&2

					[[ "${OUT_CUR}" != *= ]] || {
						printf "%s\n" "${OUT_CUR}${OUT_VAL}"
						OUT_CUR="${OUT_CUR%=}"
						OUT_VAL=
					}

					[ -n "${JSON}" ] || break

				done

				STG=STR

			done

		)"

		echo "${OUT}"

	done

}

: BASH_FUNCTION_INIT RUN; I="${BASH_SOURCE[0]##*/}"; [ "${I}" != "${0}" -a "${#BASH_SOURCE[@]}" -ne 0 ] || ${I%.*} ${@:+"${@}"}
